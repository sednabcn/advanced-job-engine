name: Auto Job Analysis

on:
  workflow_dispatch:
    inputs:
      cv_file:
        description: 'Path to CV file'
        required: false
        default: 'data/my_cv.txt'
      job_file:
        description: 'Path to job description file'
        required: false
        default: 'data/target_job.txt'
      job_title:
        description: 'Job title (optional)'
        required: false
        default: ''
      company_name:
        description: 'Company name (optional)'
        required: false
        default: ''
      generate_materials:
        description: 'Generate application materials?'
        required: false
        type: boolean
        default: true

  push:
    paths:
      - 'data/**.pdf'
      - 'data/**.docx'
      - 'data/**.txt'

env:
  DEFAULT_CV: 'data/my_cv.txt'
  DEFAULT_JOB: 'data/target_job.txt'

jobs:
  analyze:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create output directories
      run: |
        mkdir -p job_search_data
        mkdir -p output

    - name: Set file paths
      id: set_paths
      run: |
        INPUT_CV="${{ github.event.inputs.cv_file }}"
        INPUT_JOB="${{ github.event.inputs.job_file }}"
        INPUT_TITLE="${{ github.event.inputs.job_title }}"
        INPUT_COMPANY="${{ github.event.inputs.company_name }}"
        INPUT_MATERIALS="${{ github.event.inputs.generate_materials }}"
        
        CV_FILE="${INPUT_CV:-${{ env.DEFAULT_CV }}}"
        JOB_FILE="${INPUT_JOB:-${{ env.DEFAULT_JOB }}}"
        JOB_TITLE="${INPUT_TITLE:-Target Role}"
        COMPANY_NAME="${INPUT_COMPANY:-Target Company}"
        GENERATE_MATERIALS="${INPUT_MATERIALS:-true}"
        
        echo "CV_FILE=$CV_FILE" >> $GITHUB_ENV
        echo "JOB_FILE=$JOB_FILE" >> $GITHUB_ENV
        echo "JOB_TITLE=$JOB_TITLE" >> $GITHUB_ENV
        echo "COMPANY_NAME=$COMPANY_NAME" >> $GITHUB_ENV
        echo "GENERATE_MATERIALS=$GENERATE_MATERIALS" >> $GITHUB_ENV
        
        echo "Configuration:"
        echo "  CV: $CV_FILE"
        echo "  Job: $JOB_FILE"

    - name: Verify files exist
      run: |
        echo "Checking files..."
        ls -lh data/
        
        if [ ! -f "$CV_FILE" ] || [ ! -s "$CV_FILE" ]; then
          echo "Error: CV file missing or empty: $CV_FILE"
          exit 1
        fi
        
        if [ ! -f "$JOB_FILE" ] || [ ! -s "$JOB_FILE" ]; then
          echo "Error: Job file missing or empty: $JOB_FILE"
          exit 1
        fi
        
        echo "Files verified:"
        echo "  CV: $(wc -w < "$CV_FILE") words"
        echo "  Job: $(wc -w < "$JOB_FILE") words"

    - name: Debug analysis (if needed)
      if: ${{ failure() }}
      run: |
        python3 << 'DEBUG'
        import sys
        sys.path.insert(0, "src")
        from python_advanced_job_engine import AdvancedJobEngine
        import os
        
        engine = AdvancedJobEngine()
        cv = os.environ["CV_FILE"]
        job = os.environ["JOB_FILE"]
        
        print("Debugging:")
        try:
            cv_text = engine.read_document(cv)
            print(f"CV readable: {len(cv_text.split())} words")
        except Exception as e:
            print(f"CV error: {e}")
        
        try:
            job_text = engine.read_document(job)
            print(f"Job readable: {len(job_text.split())} words")
        except Exception as e:
            print(f"Job error: {e}")
        DEBUG

    - name: Run analysis
      id: analysis
      run: python3 scripts/run_analysis.py

    - name: Upload results
      uses: actions/upload-artifact@v4
      with:
        name: job-analysis-${{ steps.analysis.outputs.job_id }}
        path: output/
        retention-days: 90

    - name: Create summary
      run: |
        echo "## ðŸŽ¯ Job Analysis Complete!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Match Score:** ${{ steps.analysis.outputs.score }}%" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** ${{ steps.analysis.outputs.status }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f output/summary.txt ]; then
          cat output/summary.txt >> $GITHUB_STEP_SUMMARY
        fi
