name: Auto Job Analysis

on:
  workflow_dispatch:
    inputs:
      cv_file:
        description: 'Path to CV file'
        required: false
        default: 'data/my_cv.txt'
      job_file:
        description: 'Path to job description file'
        required: false
        default: 'data/target_job.txt'
      job_title:
        description: 'Job title (optional)'
        required: false
        default: ''
      company_name:
        description: 'Company name (optional)'
        required: false
        default: ''
      generate_materials:
        description: 'Generate application materials?'
        required: false
        type: boolean
        default: true

  push:
    paths:
      - 'data/**.pdf'
      - 'data/**.docx'
      - 'data/**.txt'

env:
  DEFAULT_CV: 'data/my_cv.txt'
  DEFAULT_JOB: 'data/target_job.txt'

jobs:
  analyze:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create output directories
      run: |
        mkdir -p job_search_data
        mkdir -p output

    - name: Set file paths
      id: set_paths
      run: |
        INPUT_CV="${{ github.event.inputs.cv_file }}"
        INPUT_JOB="${{ github.event.inputs.job_file }}"
        INPUT_TITLE="${{ github.event.inputs.job_title }}"
        INPUT_COMPANY="${{ github.event.inputs.company_name }}"
        INPUT_MATERIALS="${{ github.event.inputs.generate_materials }}"
        
        CV_FILE="${INPUT_CV:-${{ env.DEFAULT_CV }}}"
        JOB_FILE="${INPUT_JOB:-${{ env.DEFAULT_JOB }}}"
        JOB_TITLE="${INPUT_TITLE:-Target Role}"
        COMPANY_NAME="${INPUT_COMPANY:-Target Company}"
        GENERATE_MATERIALS="${INPUT_MATERIALS:-true}"
        
        echo "CV_FILE=$CV_FILE" >> $GITHUB_ENV
        echo "JOB_FILE=$JOB_FILE" >> $GITHUB_ENV
        echo "JOB_TITLE=$JOB_TITLE" >> $GITHUB_ENV
        echo "COMPANY_NAME=$COMPANY_NAME" >> $GITHUB_ENV
        echo "GENERATE_MATERIALS=$GENERATE_MATERIALS" >> $GITHUB_ENV
        
        echo "Configuration:"
        echo "  CV: $CV_FILE"
        echo "  Job: $JOB_FILE"

    - name: Verify files exist
      run: |
        echo "Checking files..."
        ls -lh data/
        
        if [ ! -f "$CV_FILE" ] || [ ! -s "$CV_FILE" ]; then
          echo "Error: CV file missing or empty: $CV_FILE"
          exit 1
        fi
        
        if [ ! -f "$JOB_FILE" ] || [ ! -s "$JOB_FILE" ]; then
          echo "Error: Job file missing or empty: $JOB_FILE"
          exit 1
        fi
        
        echo "Files verified OK"

    - name: Run analysis
      id: analysis
      run: |
        python3 -c '
        import sys
        import os
        sys.path.insert(0, "src")
        
        from python_advanced_job_engine import AdvancedJobEngine
        import json
        from datetime import datetime
        
        cv = os.environ["CV_FILE"]
        job = os.environ["JOB_FILE"]
        title = os.environ["JOB_TITLE"]
        company = os.environ["COMPANY_NAME"]
        gen_mat = os.environ["GENERATE_MATERIALS"].lower() == "true"
        
        print("="*70)
        print("Job Analysis")
        print("="*70)
        print(f"CV: {cv}")
        print(f"Job: {job}")
        
        engine = AdvancedJobEngine()
        
        analysis = engine.analyze_from_files(
            cv_file=cv,
            job_file=job,
            job_title=title if title != "Target Role" else None,
            company=company if company != "Target Company" else None
        )
        
        score = analysis["score"]["total_score"]
        job_id = analysis["job_id"]
        
        print(f"\nMatch Score: {score}%")
        print(f"Job ID: {job_id}")
        
        # Save outputs
        with open("output/match_score.json", "w") as f:
            json.dump(analysis["score"], f, indent=2)
        
        with open("output/gap_analysis.json", "w") as f:
            json.dump(analysis["gaps"], f, indent=2)
        
        with open("output/full_analysis.json", "w") as f:
            json.dump(analysis, f, indent=2)
        
        # Learning plan
        learning_plan = engine.create_learning_plan(analysis, mode="standard")
        with open("output/learning_plan.json", "w") as f:
            json.dump(learning_plan, f, indent=2)
        
        # Strategy
        strategy = engine.create_improvement_strategy(analysis, learning_plan)
        with open("output/strategy.md", "w") as f:
            f.write(strategy)
        
        # Letters
        if gen_mat:
            letters = engine.generate_recruiter_letter(analysis, learning_plan)
            for name, content in letters.items():
                with open(f"output/{name}.txt", "w") as f:
                    f.write(content)
        
        # Tests
        skills = analysis["gaps"]["missing_required_skills"][:10]
        tests = engine.generate_skill_tests(skills)
        with open("output/skill_tests.json", "w") as f:
            json.dump(tests, f, indent=2)
        
        # Report
        ts = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        lines = []
        lines.append("# Job Match Analysis Report")
        lines.append("")
        lines.append(f"**Generated:** {ts}")
        lines.append(f"**Job ID:** {job_id}")
        lines.append("")
        lines.append("---")
        lines.append("")
        lines.append(f"## Match Score: {score}%")
        lines.append("")
        lines.append("### Score Breakdown")
        for cat, sc in analysis["score"]["breakdown"].items():
            lines.append(f"- {cat.replace('_', ' ').title()}: {sc}%")
        
        lines.append("")
        lines.append("---")
        lines.append("")
        lines.append("## Gap Analysis")
        lines.append("")
        
        missing_req = analysis["gaps"]["missing_required_skills"]
        lines.append(f"### Missing Required Skills ({len(missing_req)})")
        for skill in missing_req[:15]:
            lines.append(f"- {skill}")
        if len(missing_req) > 15:
            lines.append(f"\n... and {len(missing_req) - 15} more")
        
        lines.append("")
        missing_pref = analysis["gaps"]["missing_preferred_skills"]
        lines.append(f"### Missing Preferred Skills ({len(missing_pref)})")
        for skill in missing_pref[:10]:
            lines.append(f"- {skill}")
        
        exp_gap = analysis["gaps"]["experience_gap"]
        edu_gap = analysis["gaps"]["education_gap"]
        lines.append(f"\n### Experience Gap: {exp_gap} years")
        lines.append(f"### Education Gap: {edu_gap}")
        
        lines.append("")
        lines.append("---")
        lines.append("")
        lines.append("## Recommendation")
        lines.append("")
        if score >= 75:
            lines.append("✅ **STRONG CANDIDATE** - Apply now!")
        elif score >= 60:
            lines.append("⚠️  **NEEDS IMPROVEMENT** - Improve for 4-8 weeks")
        else:
            lines.append("❌ **MAJOR GAPS** - Skill development needed (12-24 weeks)")
        
        report = "\n".join(lines)
        with open("output/complete_report.md", "w") as f:
            f.write(report)
        
        # Summary
        status = "success" if score >= 75 else "needs_improvement"
        action_text = "Apply now!" if score >= 75 else f"Improve for {12 if score < 60 else 4}-{24 if score < 60 else 8} weeks"
        
        summary_lines = []
        summary_lines.append("ANALYSIS SUMMARY")
        summary_lines.append("")
        summary_lines.append(f"Job ID: {job_id}")
        summary_lines.append(f"Match Score: {score}%")
        summary_lines.append(f"Status: {'STRONG CANDIDATE' if score >= 75 else 'NEEDS IMPROVEMENT'}")
        summary_lines.append("")
        summary_lines.append(f"Action: {action_text}")
        summary_lines.append("")
        summary_lines.append("Files generated:")
        summary_lines.append("  - complete_report.md")
        summary_lines.append("  - match_score.json")
        summary_lines.append("  - gap_analysis.json")
        summary_lines.append("  - full_analysis.json")
        summary_lines.append("  - learning_plan.json")
        summary_lines.append("  - strategy.md")
        summary_lines.append("  - skill_tests.json")
        if gen_mat:
            summary_lines.append("  - cover_letter.txt")
            summary_lines.append("  - linkedin_message.txt")
            summary_lines.append("  - followup_email.txt")
            summary_lines.append("  - networking_email.txt")
        
        summary = "\n".join(summary_lines)
        with open("output/summary.txt", "w") as f:
            f.write(summary)
        
        print("\n" + "="*70)
        print("Analysis Complete")
        print("="*70)
        
        # GitHub outputs
        with open(os.environ["GITHUB_OUTPUT"], "a") as f:
            f.write(f"score={score}\n")
            f.write(f"job_id={job_id}\n")
            f.write(f"status={status}\n")
        '

    - name: Upload results
      uses: actions/upload-artifact@v4
      with:
        name: job-analysis-${{ steps.analysis.outputs.job_id }}
        path: output/
        retention-days: 90

    - name: Create summary
      run: |
        echo "## 🎯 Job Analysis Complete!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Match Score:** ${{ steps.analysis.outputs.score }}%" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** ${{ steps.analysis.outputs.status }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f output/summary.txt ]; then
          cat output/summary.txt >> $GITHUB_STEP_SUMMARY
        fi
