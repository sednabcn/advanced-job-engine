name: Reverse-Engine Job Search - Complete Automation
# ===============================================================
# üöÄ UNIFIED REVERSE JOB ENGINE ‚Äî USAGE & CONTRIBUTION GUIDE
# ===============================================================
#
# üß≠ USAGE GUIDE
# ---------------------------------------------------------------
# 1Ô∏è‚É£ INITIAL SETUP
#    ‚Ä¢ Place your CV file here:
#         data/my_cv.txt (or .pdf, .docx)
#    ‚Ä¢ Place your target job description here:
#         data/target_job.txt (or .pdf, .docx)
#
# 2Ô∏è‚É£ FILE FORMAT
#    ‚Ä¢ The engine supports multiple formats:
#         ‚úÖ .txt  - Plain text files
#         ‚úÖ .pdf  - PDF documents
#         ‚úÖ .docx - Microsoft Word documents
#
# 3Ô∏è‚É£ WORKFLOW EXECUTION
#    ‚Ä¢ Trigger manually from "Actions" tab
#    ‚Ä¢ Runs automatically at 9 AM and 9 PM daily
#
# 4Ô∏è‚É£ OUTPUT
#    ‚Ä¢ All data saved in: job_search_data/
#    ‚Ä¢ Reports available as artifacts
#
# ===============================================================

on:
  schedule:
    - cron: '0 9,21 * * *'  # 9 AM and 9 PM daily
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        type: choice
        options:
          - daily_report
          - start_sprint
          - log_daily
          - end_sprint
          - quality_check
          - full_analysis
      hours:
        description: 'Hours spent today (for log_daily)'
        required: false
        default: '3'
      concepts:
        description: 'Concepts learned (comma-separated, for log_daily)'
        required: false
        default: ''
      notes:
        description: 'Daily notes (for log_daily)'
        required: false
        default: ''
      project_url:
        description: 'Project URL (for end_sprint)'
        required: false
        default: ''
      test_scores:
        description: 'Test scores JSON: {"skill": score} (for end_sprint)'
        required: false
        default: '{}'
      cv_path:
        description: 'Path to CV file (.txt, .pdf, .docx)'
        required: false
        default: 'data/my_cv.pdf'
      job_path:
        description: 'Path to job description (.txt, .pdf, .docx)'
        required: false
        default: 'data/target_job.pdf'
  
env:
  PYTHON_VERSION: '3.9'
  ENGINE_SCRIPT: 'src/python_advanced_job_engine.py'
  PYTHONPATH: 'src'
  DATA_DIR: 'job_search_data'
  TARGET_SCORE: 90

jobs:
  reverse_engine_workflow:
    name: Reverse-Engine Job Search Automation
    runs-on: ubuntu-latest
    
    steps:
      # =====================================================================
      # SETUP
      # =====================================================================
      
      - name: üì• Checkout repository
        uses: actions/checkout@v4
      
      - name: üêç Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: üì¶ Install dependencies
        run: |
          pip install --upgrade pip
          pip install python-dateutil PyPDF2 python-docx
          echo "‚úÖ Installed: python-dateutil, PyPDF2, python-docx"
      
      - name: üìÇ Ensure data directories exist
        run: |
          mkdir -p ${{ env.DATA_DIR }}
          mkdir -p data
          mkdir -p src
          
          # Verify script exists
          if [ ! -f "src/python_advanced_job_engine.py" ]; then
            echo "‚ùå Error: src/python_advanced_job_engine.py not found"
            exit 1
          fi
          
          echo "‚úÖ Data directories created"
          echo "‚úÖ Script verified at: src/python_advanced_job_engine.py"
      
      # =====================================================================
      # LOAD ENGINE AND STATE
      # =====================================================================
      
      - name: üîß Initialize Engine
        id: init_engine
        run: |
          python << 'PYTHON_EOF'
          import os
          import sys
          
          try:
              # Add src to path
              sys.path.insert(0, os.path.join(os.getcwd(), 'src'))
              
              # Import the engine
              from python_advanced_job_engine import AdvancedJobEngine
              
              # Initialize engine
              engine = AdvancedJobEngine(data_dir="${{ env.DATA_DIR }}")
              
              # Get current state with safe defaults
              state = engine.state
              current_score = state.get('current_score', 0)
              baseline_score = state.get('baseline_score', 0)
              current_sprint = state.get('current_sprint', 0)
              mode = state.get('mode') or 'none'
              
              print(f"current_score={current_score}")
              print(f"baseline_score={baseline_score}")
              print(f"current_sprint={current_sprint}")
              print(f"mode={mode}")
              
              # Determine if initialized
              initialized = 'true' if (mode and mode != 'none') else 'false'
              print(f"initialized={initialized}")
              
              # Output for GitHub Actions
              with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                  f.write(f"current_score={current_score}\n")
                  f.write(f"baseline_score={baseline_score}\n")
                  f.write(f"current_sprint={current_sprint}\n")
                  f.write(f"mode={mode}\n")
                  f.write(f"initialized={initialized}\n")
              
              print("\n‚úÖ Engine initialized successfully")
              
          except ImportError as e:
              print(f"‚ùå Import Error: {e}")
              print("Ensure script is at: src/python_advanced_job_engine.py")
              exit(1)
          except Exception as e:
              print(f"‚ùå Error: {e}")
              import traceback
              traceback.print_exc()
              exit(1)
          PYTHON_EOF
      # =====================================================================
      # DAILY MONITORING & PROGRESS REPORT
      # =====================================================================
      
      - name: üìä Generate Daily Progress Report
        if: |
          github.event.schedule == '0 9,21 * * *' || 
          github.event.inputs.action == 'daily_report'
        run: |
          python << 'PYTHON_EOF'
          import os
          import sys
          from datetime import datetime
          
          try:
              sys.path.insert(0, 'src')
              from python_advanced_job_engine import AdvancedJobEngine
              
              engine = AdvancedJobEngine(data_dir="${{ env.DATA_DIR }}")
              
              if engine.state.get('mode') is None:
                  print("\n‚ö†Ô∏è  Workflow not initialized yet.")
                  print("   Run 'full_analysis' action first with your CV and job description.")
                  exit(0)
              
              print("\n" + "="*80)
              print(f"DAILY PROGRESS REPORT - {datetime.now().strftime('%Y-%m-%d %H:%M')}")
              print("="*80)
              
              # Display the dashboard
              engine.display_progress_dashboard()
              
              # Check if sprint reminder needed
              if engine.sprint_history:
                  last_sprint = engine.sprint_history[-1]
                  if isinstance(last_sprint, dict) and not last_sprint.get('completed', False):
                      days_logged = len(last_sprint.get('daily_logs', []))
                      print(f"\n‚è∞ SPRINT REMINDER:")
                      print(f"   Current sprint: {last_sprint['sprint_number']}")
                      print(f"   Days logged: {days_logged}/14")
                      print(f"   Don't forget to log today's progress!")
              
              print("\n" + "="*80)
              
          except Exception as e:
              print(f"‚ùå Error: {e}")
              import traceback
              traceback.print_exc()
              exit(1)
          PYTHON_EOF
      
      # =====================================================================
      # FULL JOB ANALYSIS (Initial or Re-analysis)
      # =====================================================================

      - name: üéØ Run Full Job Analysis
        if: github.event.inputs.action == 'full_analysis'
        run: |
          python << 'PYTHON_EOF'
          import os
          import sys
          from pathlib import Path
          
          try:
              sys.path.insert(0, 'src')
              from python_advanced_job_engine import AdvancedJobEngine
              
              # Get file paths
              cv_path = "${{ github.event.inputs.cv_path }}"
              job_path = "${{ github.event.inputs.job_path }}"
              
              print("\n" + "="*80)
              print("FULL JOB ANALYSIS")
              print("="*80)
              
              # Initialize engine
              engine = AdvancedJobEngine(data_dir="${{ env.DATA_DIR }}")
              
              # Analyze from files (supports .txt, .pdf, .docx)
              print(f"\nüìä Analyzing CV: {cv_path}")
              print(f"üìä Against Job: {job_path}")
              
              analysis = engine.analyze_from_files(
                  cv_file=cv_path,
                  job_file=job_path,
                  job_title="Target Role",
                  company="Target Company"
              )
              
              # Create learning plan (Reverse mode)
              print("\nüìö Creating learning plan (REVERSE mode)...")
              learning_plan = engine.create_learning_plan(analysis, mode="reverse")
              
              # Create improvement strategy
              print("\nüéØ Creating improvement strategy...")
              strategy = engine.create_improvement_strategy(analysis, learning_plan)
              
              # Generate skill tests
              print("\nüìù Generating skill tests...")
              missing_skills = analysis['gaps']['missing_required_skills'][:5]
              tests = engine.generate_skill_tests(missing_skills)
              
              # Generate letters
              print("\n‚úâÔ∏è  Generating application materials...")
              letters = engine.generate_recruiter_letter(analysis, learning_plan)
              
              # Update state
              engine.state['baseline_score'] = analysis['score']['total_score']
              engine.state['current_score'] = analysis['score']['total_score']
              engine.state['mode'] = 'reverse'
              engine.state['current_stage'] = 'baseline'
              engine._save_json(engine.state_file, engine.state)
              
              # Display results
              print("\n" + "="*80)
              print("ANALYSIS COMPLETE")
              print("="*80)
              print(f"\nüìä Match Score: {analysis['score']['total_score']}%")
              print(f"üìã Missing Skills: {len(analysis['gaps']['missing_required_skills'])}")
              print(f"‚è±Ô∏è  Timeline: {learning_plan['estimated_duration']}")
              print(f"\n‚úÖ All data saved to: {engine.data_dir}")
              print(f"\nüöÄ Next Step: Start your first sprint!")
              print("="*80)
              
          except FileNotFoundError as e:
              print(f"‚ùå {e}")
              exit(1)
          except ImportError as e:
              print(f"‚ùå {e}")
              print("\nüí° Install required libraries:")
              print("   pip install PyPDF2 python-docx")
              exit(1)
          except Exception as e:
              print(f"‚ùå Error: {e}")
              import traceback
              traceback.print_exc()
              exit(1)
          PYTHON_EOF
          
      # =====================================================================
      # START NEW SPRINT
      # =====================================================================
      
      - name: üèÉ Start Sprint
        if: github.event.inputs.action == 'start_sprint'
        run: |
          python << 'PYTHON_EOF'
          import os
          import sys
          
          try:
              sys.path.insert(0, 'src')
              from python_advanced_job_engine import AdvancedJobEngine
              
              engine = AdvancedJobEngine(data_dir="${{ env.DATA_DIR }}")
              
              if engine.state.get('mode') is None:
                  print("‚ùå Workflow not initialized. Run 'full_analysis' first.")
                  exit(1)
              
              # Get next skills to work on from learning plan
              if not engine.learning_progress:
                  print("‚ùå No learning plan found. Run 'full_analysis' first.")
                  exit(1)
              
              plan = engine.learning_progress[-1] if isinstance(engine.learning_progress, list) else engine.learning_progress
              
              # Get next skills from study level
              skills_to_learn = []
              mastered_lower = [s.lower() for s in engine.state.get('skills_mastered', [])]
              
              for item in plan['levels']['study']:
                  if item['skill'].lower() not in mastered_lower:
                      skills_to_learn.append(item['skill'])
                      if len(skills_to_learn) >= 2:
                          break
              
              if not skills_to_learn:
                  # Try practice level
                  for item in plan['levels']['practice']:
                      if item['skill'].lower() not in mastered_lower:
                          skills_to_learn.append(item['skill'])
                          if len(skills_to_learn) >= 2:
                              break
              
              if not skills_to_learn:
                  print("üéâ All planned skills mastered! Consider:")
                  print("   1. Re-analyze with updated CV")
                  print("   2. Add more advanced skills")
                  print("   3. Focus on positioning and branding")
                  exit(0)
              
              project_goal = f"Build project demonstrating {' and '.join(skills_to_learn)}"
              
              # Start sprint
              sprint = engine.start_sprint(skills_to_learn, project_goal)
              
              print("\nüìå To log daily progress:")
              print("   Run workflow with action: log_daily")
              print("   Provide hours, concepts, and notes")
              
          except Exception as e:
              print(f"‚ùå Error: {e}")
              import traceback
              traceback.print_exc()
              exit(1)
          PYTHON_EOF
      
      # =====================================================================
      # LOG DAILY PROGRESS
      # =====================================================================

      - name: üìù Log Daily Progress
        if: github.event.inputs.action == 'log_daily'
        run: |
          python << 'PYTHON_EOF'
          import sys
          
          try:
              sys.path.insert(0, 'src')
              from python_advanced_job_engine import AdvancedJobEngine
              
              engine = AdvancedJobEngine(data_dir="${{ env.DATA_DIR }}")
              
              if not engine.sprint_history:
                  print("‚ùå No active sprint. Start a sprint first.")
                  exit(1)
              
              last_sprint = engine.sprint_history[-1]
              if not isinstance(last_sprint, dict) or last_sprint.get('completed', False):
                  print("‚ùå No active sprint. Current sprint is completed.")
                  exit(1)
              
              # Get inputs
              hours = float("${{ github.event.inputs.hours }}")
              concepts_str = "${{ github.event.inputs.concepts }}"
              concepts = [c.strip() for c in concepts_str.split(',') if c.strip()]
              notes = "${{ github.event.inputs.notes }}"
              
              if not concepts:
                  concepts = ["Daily learning progress"]
              
              # Log daily progress
              engine.log_daily(hours, concepts, notes)
              
              print(f"\n‚úÖ Successfully logged {hours}h with {len(concepts)} concepts")
              
          except ValueError as e:
              print(f"‚ùå Invalid hours value: {e}")
              exit(1)
          except Exception as e:
              print(f"‚ùå Error: {e}")
              import traceback
              traceback.print_exc()
              exit(1)
          PYTHON_EOF

      # =====================================================================
      # END CURRENT SPRINT
      # =====================================================================
      
      - name: üèÅ End Sprint
        if: github.event.inputs.action == 'end_sprint'
        run: |
          python << 'PYTHON_EOF'
          import os
          import sys
          import json
          from pathlib import Path
          
          try:
              sys.path.insert(0, 'src')
              from python_advanced_job_engine import AdvancedJobEngine
              
              engine = AdvancedJobEngine(data_dir="${{ env.DATA_DIR }}")
              
              if not engine.sprint_history:
                  print("‚ùå No active sprint found.")
                  exit(1)
              
              current_sprint = engine.sprint_history[-1]
              
              if not isinstance(current_sprint, dict):
                  print("‚ùå Invalid sprint data.")
                  exit(1)
              
              if current_sprint.get('completed', False):
                  print("‚ùå Current sprint already completed.")
                  print("   Start a new sprint with 'start_sprint' action")
                  exit(1)
              
              print("\n" + "="*80)
              print(f"ENDING SPRINT {current_sprint['sprint_number']}")
              print("="*80)
              
              # Get project URL and test scores from inputs
              project_url = "${{ github.event.inputs.project_url }}"
              test_scores_str = "${{ github.event.inputs.test_scores }}"
              
              if not project_url:
                  project_url = "https://github.com/user/sprint-project"
                  print("‚ö†Ô∏è  Using default project URL (provide via inputs)")
              
              if test_scores_str and test_scores_str != '{}':
                  test_scores = json.loads(test_scores_str)
              else:
                  # Default passing scores
                  test_scores = {
                      skill: 70.0
                      for skill in current_sprint['skills_targeted']
                  }
                  print("‚ö†Ô∏è  Using default test scores (70% for all skills)")
              
              # End sprint
              result = engine.end_sprint(project_url, test_scores)

              # Re-analyze with updated CV
              cv_path = "${{ github.event.inputs.cv_path }}"
              job_path = "${{ github.event.inputs.job_path }}"

              try:
                  print("\nüîÑ Re-analyzing job match...")
                  analysis = engine.analyze_from_files(cv_path, job_path)
                  new_score = analysis['score']['total_score']
                  old_score = engine.state.get('current_score', 0)
                  
                  engine.state['current_score'] = new_score
                  engine._save_json(engine.state_file, engine.state)
                  
                  print(f"\nüìä Score Update:")
                  print(f"   Previous: {old_score}%")
                  print(f"   Current:  {new_score}%")
                  print(f"   Change:   {new_score - old_score:+.1f}%")
              except Exception as e:
                  print(f"‚ö†Ô∏è  Could not re-analyze: {e}")
              
              print("\n" + "="*80)
              
          except json.JSONDecodeError as e:
              print(f"‚ùå Invalid JSON in test_scores: {e}")
              exit(1)
          except Exception as e:
              print(f"‚ùå Error: {e}")
              import traceback
              traceback.print_exc()
              exit(1)
          PYTHON_EOF
      
      # =====================================================================
      # QUALITY GATE CHECK
      # =====================================================================
      
      - name: üö™ Check Quality Gates
        if: |
          github.event.schedule == '0 9,21 * * *' || 
          github.event.inputs.action == 'quality_check'
        id: quality_gates
        run: |
          python << 'PYTHON_EOF'
          import os
          import sys
          
          try:
              sys.path.insert(0, 'src')
              from python_advanced_job_engine import AdvancedJobEngine
              
              engine = AdvancedJobEngine(data_dir="${{ env.DATA_DIR }}")
              
              if engine.state.get('mode') is None:
                  print("‚ö†Ô∏è  No workflow initialized")
                  exit(0)
              
              print("\n" + "="*80)
              print("QUALITY GATE ASSESSMENT")
              print("="*80)
              
              # Check quality gates
              gates_status = engine.check_quality_gates()
              
              state = engine.state
              score = state.get('current_score', 0)
              projects = len(state.get('projects_completed', []))
              
              print(f"\nüìä Current Status:")
              print(f"   Match Score: {score}%")
              print(f"   Projects: {projects}")
              print(f"   Skills Mastered: {len(state.get('skills_mastered', []))}")
              
              print(f"\nüö™ Quality Gates:")
              for gate_name, passed in gates_status.items():
                  status = "‚úÖ" if passed else "‚è≥"
                  req = engine.QUALITY_GATES[gate_name]
                  print(f"   {status} {gate_name.upper()}")
                  if "score" in req:
                      print(f"      Score: {score}/{req['score']}%")
                  if "projects" in req:
                      print(f"      Projects: {projects}/{req['projects']}")
              
              # Check if ready for applications
              if gates_status.get('application_ready', False):
                  print(f"\nüéâ CONGRATULATIONS!")
                  print(f"   You've passed all quality gates!")
                  print(f"   YOU ARE NOW APPLICATION-READY! üöÄ")
                  
                  # Output for notifications
                  with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                      f.write("application_ready=true\n")
              else:
                  with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                      f.write("application_ready=false\n")
              
              print("\n" + "="*80)
              
          except Exception as e:
              print(f"‚ùå Error: {e}")
              import traceback
              traceback.print_exc()
              exit(1)
          PYTHON_EOF

      # =====================================================================
      # SPRINT RECOMMENDATIONS
      # =====================================================================
      
      - name: üí° Generate Sprint Recommendations
        if: steps.init_engine.outputs.initialized == 'true'
        run: |
          python << 'PYTHON_EOF'
          import os
          import sys
          
          try:
              sys.path.insert(0, 'src')
              from python_advanced_job_engine import AdvancedJobEngine
              
              engine = AdvancedJobEngine(data_dir="${{ env.DATA_DIR }}")
              
              if not engine.sprint_history:
                  print("\nüí° No sprints completed yet.")
                  print("   Start your first sprint to begin tracking!")
                  exit(0)
              
              completed_sprints = [
                  s for s in engine.sprint_history 
                  if isinstance(s, dict) and s.get('completed')
              ]
              
              if not completed_sprints:
                  print("\n‚è≥ Sprint in progress...")
                  current = engine.sprint_history[-1]
                  if isinstance(current, dict):
                      days_logged = len(current.get('daily_logs', []))
                      print(f"   Sprint {current.get('sprint_number', '?')}: Day {days_logged}/14")
                  exit(0)
              
              last_sprint = completed_sprints[-1]
              
              print("\n" + "="*80)
              print("SPRINT RECOMMENDATIONS")
              print("="*80)
              
              total_hours = last_sprint.get('total_hours', 0)
              
              print(f"\nüìä Last Sprint Performance:")
              print(f"   Total Hours: {total_hours:.1f}h")
              
              state = engine.state
              current_score = state.get('current_score', 0)
              
              print(f"\nüí° Recommendations:")
              
              if current_score < 65:
                  print(f"\nüéØ Next Sprint Focus: FOUNDATION")
                  print(f"   ‚Ä¢ Core Tier 1 skills")
                  print(f"   ‚Ä¢ Basic projects")
                  print(f"   ‚Ä¢ Beginner tests")
              elif current_score < 80:
                  print(f"\nüéØ Next Sprint Focus: SKILL BUILDING")
                  print(f"   ‚Ä¢ Intermediate topics")
                  print(f"   ‚Ä¢ Medium complexity projects")
                  print(f"   ‚Ä¢ Intermediate tests")
              elif current_score < 90:
                  print(f"\nüéØ Next Sprint Focus: MASTERY")
                  print(f"   ‚Ä¢ Advanced concepts")
                  print(f"   ‚Ä¢ Production-grade projects")
                  print(f"   ‚Ä¢ Advanced tests")
              else:
                  print(f"\nüéØ Next Focus: POSITIONING")
                  print(f"   ‚Ä¢ Professional branding")
                  print(f"   ‚Ä¢ Network building")
                  print(f"   ‚Ä¢ Application preparation")
              
              print("\n" + "="*80)
              
          except Exception as e:
              print(f"‚ùå Error: {e}")
              import traceback
              traceback.print_exc()
              exit(1)
          PYTHON_EOF
      
      # =====================================================================
      # MILESTONE NOTIFICATIONS
      # =====================================================================
      
      - name: üéâ Check for Milestones
        if: steps.init_engine.outputs.initialized == 'true'
        run: |
          python << 'PYTHON_EOF'
          import os
          import sys
          
          try:
              sys.path.insert(0, 'src')
              from python_advanced_job_engine import AdvancedJobEngine
              
              engine = AdvancedJobEngine(data_dir="${{ env.DATA_DIR }}")
              state = engine.state
              
              score = state.get('current_score', 0)
              baseline = state.get('baseline_score', 0)
              gates = state.get('quality_gates_passed', [])
              
              milestones = []
              
              # Score milestones
              if score >= 50 and baseline < 50:
                  milestones.append("üéØ Reached 50% Match Score!")
              if score >= 65 and 'foundation' in gates:
                  milestones.append("üèÜ FOUNDATION GATE PASSED!")
              if score >= 75 and baseline < 75:
                  milestones.append("üéØ Reached 75% Match Score!")
              if score >= 80 and 'competency' in gates:
                  milestones.append("üèÜ COMPETENCY GATE PASSED!")
              if score >= 90 and 'mastery' in gates:
                  milestones.append("üèÜ MASTERY GATE PASSED!")
              
              # Sprint milestones
              sprint_count = len([
                  s for s in engine.sprint_history 
                  if isinstance(s, dict) and s.get('completed')
              ])
              if sprint_count == 1:
                  milestones.append("üéä First Sprint Complete!")
              elif sprint_count == 5:
                  milestones.append("üéä Five Sprints Complete!")
              elif sprint_count == 10:
                  milestones.append("üéä Ten Sprints Complete - You're Dedicated!")
              
              # Skill milestones
              skills_count = len(state.get('skills_mastered', []))
              if skills_count == 1:
                  milestones.append("‚ú® First Skill Mastered!")
              elif skills_count == 5:
                  milestones.append("‚ú® Five Skills Mastered!")
              elif skills_count == 10:
                  milestones.append("‚ú® Ten Skills Mastered - Impressive!")
              
              # Project milestones
              projects = len(state.get('projects_completed', []))
              if projects == 1:
                  milestones.append("üöÄ First Project Complete!")
              elif projects == 5:
                  milestones.append("üöÄ Five Projects Complete!")
              
              # Application readiness
              if state.get('application_ready', False):
                  milestones.append("üéâ APPLICATION READY - TIME TO APPLY!")
              
              if milestones:
                  print("\n" + "="*80)
                  print("üéâ MILESTONES ACHIEVED!")
                  print("="*80)
                  for milestone in milestones:
                      print(f"\n   {milestone}")
                  print("\n" + "="*80)
              
          except Exception as e:
              print(f"‚ùå Error: {e}")
              import traceback
              traceback.print_exc()
              exit(1)
          PYTHON_EOF
      
      # ===================================================================
      # GENERATE SUMMARY REPORT
      # ===================================================================
      
      - name: üìÑ Generate Summary Report
        if: always()
        run: |
          python << 'PYTHON_EOF'
          import os
          import sys
          from datetime import datetime
          from pathlib import Path
          
          try:
              sys.path.insert(0, 'src')
              from python_advanced_job_engine import AdvancedJobEngine
              
              engine = AdvancedJobEngine(data_dir="${{ env.DATA_DIR }}")
              
              if engine.state.get('mode') is None:
                  print("\nüìã Workflow not initialized yet")
                  print("   Run with action='full_analysis' to get started")
                  exit(0)
              
              # Create markdown report
              state = engine.state
              score = state.get('current_score', 0)
              baseline = state.get('baseline_score', 0)
              improvement = score - baseline
              
              report_content = f"""
              # Reverse-Engine Job Search Progress

              **Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
              **Mode:** {state.get('mode', 'N/A').upper()}

              ---

              ## üìä Match Score Progress
              | Metric | Value |
              |--------|-------|
              | Baseline Score | {baseline}% |
              | Current Score | {score}% |
              | Improvement | +{improvement}% |
              | Target Score | {state.get('target_score', 90)}% |
              | Remaining | {state.get('target_score', 90) - score}% |

              ---

              ## üéØ Skills Mastered ({len(state.get('skills_mastered', []))})
              
              """
              
              for skill in state.get('skills_mastered', []):
                  report_content += f"- ‚úÖ {skill}\n"
              
              report_content += f"""
              ---

              ## üèóÔ∏è Projects Completed ({len(state.get('projects_completed', []))})

              """
              
              for i, proj in enumerate(state.get('projects_completed', []), 1):
                  report_content += f"{i}. **{proj.get('goal', 'N/A')}**\n"
                  report_content += f"   - Skills: {', '.join(proj.get('skills', []))}\n"
                  report_content += f"   - URL: {proj.get('url', 'N/A')}\n\n"
              
              report_content += f"""
              ---

              ## üö™ Quality Gates

              | Gate | Status | Required |
              |------|--------|----------|
              | Foundation | {'‚úÖ Passed' if 'foundation' in state.get('quality_gates_passed', []) else '‚è≥ Pending'} | 65% score, 2 projects |
              | Competency | {'‚úÖ Passed' if 'competency' in state.get('quality_gates_passed', []) else '‚è≥ Pending'} | 80% score, 4 projects |
              | Mastery | {'‚úÖ Passed' if 'mastery' in state.get('quality_gates_passed', []) else '‚è≥ Pending'} | 90% score, 5 projects |
              | Application Ready | {'‚úÖ Passed' if state.get('application_ready') else '‚è≥ Pending'} | All gates + branding |

              ---

              ## üìà Sprint Progress

              - **Total Sprints:** {state.get('current_sprint', 0)}
              - **Current Stage:** {state.get('current_stage', 'baseline').replace('_', ' ').title()}
              - **Started:** {state.get('started_date', 'N/A')[:10] if state.get('started_date') else 'N/A'}

              ---

              ## üéØ Current Status

              """
              
              if score < 65:
                  report_content += """**Focus:** Foundation Building
                  - Master Tier 1 critical skills
                  - Build foundational projects
                  - Pass beginner-level tests
                  """
              elif score < 80:
                  report_content += """**Focus:** Skill Development
                  - Deepen intermediate skills
                  - Build complex projects
                  - Pass intermediate tests
                  """
              elif score < 90:
                  report_content += """**Focus:** Advanced Mastery
                  - Master advanced concepts
                  - Build production-grade projects
                  - Pass advanced tests
                  """
              else:
                  report_content += """**Focus:** Application Preparation
                  - Polish professional brand
                  - Build network connections
                  - Prepare application materials
                  - **YOU'RE READY TO APPLY! üéâ**
                  """
              
              report_content += f"""

              ---

              ## üìù Tests Passed

              """
              tests_passed = state.get('tests_passed', {})
              if tests_passed:
                  for skill, levels in tests_passed.items():
                      report_content += f"- **{skill}**: {', '.join(levels)}\n"
              else:
                  report_content += "- No tests passed yet\n"
              
              report_content += f"""

              ---

              ## üéØ Readiness Flags

              - Brand Ready: {'‚úÖ' if state.get('brand_ready') else '‚è≥ In Progress'}
              - Network Ready: {'‚úÖ' if state.get('network_ready') else '‚è≥ In Progress'}
              - Application Ready: {'‚úÖ' if state.get('application_ready') else '‚è≥ In Progress'}

              ---

              ## üìä Recent Sprint Activity

              """
              
              if engine.sprint_history:
                  completed = [
                      s for s in engine.sprint_history 
                      if isinstance(s, dict) and s.get('completed')
                  ]
                  
                  if completed:
                      for sprint in completed[-3:]:  # Last 3 completed sprints
                          report_content += f"\n### Sprint {sprint.get('sprint_number', '?')}\n"
                          report_content += f"- **Goal:** {sprint.get('project_goal', 'N/A')}\n"
                          report_content += f"- **Skills:** {', '.join(sprint.get('skills_targeted', []))}\n"
                          report_content += f"- **Hours:** {sprint.get('total_hours', 0):.1f}h\n"
                          report_content += f"- **Completed:** {sprint.get('completion_date', 'N/A')[:10]}\n"
                  else:
                      report_content += "\nNo completed sprints yet\n"
              else:
                  report_content += "\nNo sprint history available\n"
              
              report_content += """

              ---

              ## üí° Next Actions

              """
              
              if score < 65:
                  report_content += """
                  1. **Continue Foundation Sprint** - Focus on Tier 1 skills
                  2. **Build 2 Basic Projects** - Demonstrate fundamental understanding
                  3. **Pass Beginner Tests** - Validate skill acquisition
                  4. **Daily Learning** - Log progress consistently
                  """
              elif score < 80:
                  report_content += """
                  1. **Start Intermediate Sprint** - Tackle more complex topics
                  2. **Build Medium Projects** - Show practical application
                  3. **Pass Intermediate Tests** - Prove deeper understanding
                  4. **Contribute to Open Source** - Gain real-world experience
                  """
              elif score < 90:
                  report_content += """
                  1. **Master Advanced Topics** - Deep dive into specializations
                  2. **Build Production Projects** - Create portfolio showpieces
                  3. **Pass Advanced Tests** - Demonstrate expertise
                  4. **Start Networking** - Connect with industry professionals
                  """
              else:
                  report_content += """
                  1. **Polish LinkedIn Profile** - Showcase all skills and projects
                  2. **Build Professional Brand** - Blog posts, GitHub, portfolio
                  3. **Network Actively** - Reach out to target companies
                  4. **Apply to Jobs** - You're ready! üöÄ
                  """
              
              report_content += """

              ---

              *Generated by Reverse-Engine Job Search Automation*
              """
              
              # Save report
              report_path = Path("PROGRESS_REPORT.md")
              report_path.write_text(report_content)
              
              print("\n‚úÖ Summary report generated: PROGRESS_REPORT.md")
              print("\n" + "="*80)
              print("REPORT PREVIEW")
              print("="*80)
              print(report_content[:1000])  # Preview first 1000 chars
              print("\n[... full report saved to PROGRESS_REPORT.md ...]")
              print("="*80)
              
          except Exception as e:
              print(f"‚ùå Error: {e}")
              import traceback
              traceback.print_exc()
              # Don't exit with error - report generation is not critical
          PYTHON_EOF
      
      # =====================================================================
      # UPLOAD ARTIFACTS
      # =====================================================================

      - name: üì§ Upload Progress Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: progress-report-${{ github.run_number }}
          path: |
            PROGRESS_REPORT.md
            ${{ env.DATA_DIR }}/*.json
          retention-days: 90
      
      # =====================================================================
      # FINAL NOTIFICATION
      # =====================================================================
      
      - name: üîî Final Status
        if: always()
        run: |
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "‚úÖ Reverse-Engine Workflow Complete"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo ""
          echo "üìä Action Performed: ${{ github.event.inputs.action || 'scheduled' }}"
          echo "üìÅ Data Directory: ${{ env.DATA_DIR }}"
          echo "üìÑ Report Available: PROGRESS_REPORT.md (in artifacts)"
          echo ""
          echo "üí° Available Actions:"
          echo "   ‚Ä¢ full_analysis   - Analyze CV vs job description"
          echo "   ‚Ä¢ start_sprint    - Begin new learning sprint"
          echo "   ‚Ä¢ log_daily       - Log daily progress (hours, concepts, notes)"
          echo "   ‚Ä¢ end_sprint      - Complete sprint with project & tests"
          echo "   ‚Ä¢ quality_check   - Assess quality gate progress"
          echo "   ‚Ä¢ daily_report    - View comprehensive dashboard"
          echo ""
          echo "üöÄ Keep building towards that 90%+ match score!"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
      
      # =====================================================================
      # CONDITIONAL NOTIFICATIONS (Optional - for future integration)
      # =====================================================================
      
      - name: üéâ Application Ready Notification
        if: steps.quality_gates.outputs.application_ready == 'true'
        run: |
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "üéâüéâüéâ CONGRATULATIONS! YOU'RE APPLICATION READY! üéâüéâüéâ"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo ""
          echo "‚úÖ All quality gates passed"
          echo "‚úÖ Match score target achieved"
          echo "‚úÖ Professional brand ready"
          echo "‚úÖ Network established"
          echo ""
          echo "üöÄ NEXT STEPS:"
          echo "   1. Polish your CV with new skills"
          echo "   2. Update LinkedIn profile"
          echo "   3. Prepare application materials"
          echo "   4. START APPLYING TO JOBS!"
          echo ""
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
