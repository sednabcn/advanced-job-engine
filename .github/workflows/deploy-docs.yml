name: Deploy Documentation

on:
  push:
    branches:
      - main
    paths:
      - 'docs/**'
      - 'README.md'
      - 'mkdocs.yml'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for git info
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install mkdocs mkdocs-material mkdocs-git-revision-date-localized-plugin
          pip install mkdocs-minify-plugin mkdocs-redirects
          pip install pymdown-extensions
      
      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
      
      - name: Validate documentation structure
        run: |
          python -c "
          from pathlib import Path
          docs_dir = Path('docs')
          required_files = ['index.md', 'getting-started.md', 'user-guide.md']
          missing = [f for f in required_files if not (docs_dir / f).exists()]
          if missing:
              print(f'⚠️  Missing documentation files: {missing}')
              print('Creating placeholder files...')
              for f in missing:
                  (docs_dir / f).touch()
          else:
              print('✓ All required documentation files present')
          "
      
      - name: Build documentation
        run: |
          mkdocs build --strict --verbose
      
      - name: Check for broken links
        continue-on-error: true
        run: |
          pip install linkchecker
          linkchecker --check-extern site/ || echo "⚠️  Some links may be broken"
      
      - name: Generate documentation statistics
        run: |
          echo "📊 Documentation Statistics" > site/stats.txt
          echo "Generated: $(date)" >> site/stats.txt
          echo "Total pages: $(find docs -name '*.md' | wc -l)" >> site/stats.txt
          echo "Total size: $(du -sh site | cut -f1)" >> site/stats.txt
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

  deploy:
    needs: build
    runs-on: ubuntu-latest
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      
      - name: Output deployment URL
        run: |
          echo "📚 Documentation deployed to: ${{ steps.deployment.outputs.page_url }}"

  notify:
    needs: deploy
    runs-on: ubuntu-latest
    if: success()
    
    steps:
      - name: Send success notification
        run: |
          echo "✅ Documentation successfully deployed!"
          echo "URL: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"
      
      - name: Create deployment summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## 📚 Documentation Deployment
          
          **Status:** ✅ Success
          **Branch:** \`${{ github.ref_name }}\`
          **Commit:** \`${{ github.sha }}\`
          **Deployed by:** @${{ github.actor }}
          **Deployment URL:** https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/
          
          ### Changes
          $(git log -1 --pretty=format:"- %s (%an)")
          EOF
      
      - name: Comment on commit (if available)
        if: github.event_name == 'push'
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## 📚 Documentation Deployed
            
            Your documentation has been successfully deployed!
            
            🔗 **View documentation:** https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/
            
            Deployed from commit: \`${{ github.sha }}\``;
            
            // This would post to PR if triggered from PR, otherwise just logs
            console.log(comment);

  validate:
    needs: deploy
    runs-on: ubuntu-latest
    if: success()
    
    steps:
      - name: Wait for deployment to be available
        run: sleep 30
      
      - name: Validate deployment
        run: |
          URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"
          echo "🔍 Validating deployment at: $URL"
          
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$URL" || echo "000")
          
          if [ "$STATUS" = "200" ]; then
            echo "✅ Documentation is accessible (HTTP $STATUS)"
          else
            echo "⚠️  Documentation returned HTTP $STATUS"
            exit 1
          fi
      
      - name: Check critical pages
        run: |
          BASE_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
          PAGES=("/" "/getting-started/" "/user-guide/")
          
          for page in "${PAGES[@]}"; do
            URL="${BASE_URL}${page}"
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$URL" || echo "000")
            if [ "$STATUS" = "200" ]; then
              echo "✅ $URL is accessible"
            else
              echo "⚠️  $URL returned HTTP $STATUS"
            fi
          done
