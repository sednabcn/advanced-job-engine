name: Unified Job Search Engine

on:
  schedule:
    - cron: '0 9,21 * * *'
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        type: choice
        options:
          - full_analysis
          - batch_analysis
          - start_sprint
          - log_daily
          - end_sprint
          - daily_report
          - quality_check
      # ... other inputs

env:
  STATE_ARTIFACT: job-search-state-v1
  CACHE_KEY_PREFIX: job-search-
  DATA_DIR: job_search_data

jobs:
  job-search-engine:
    runs-on: ubuntu-latest
    
    steps:
      # ========================================
      # RESTORE PERSISTENT STATE
      # ========================================
      
      - name: 📥 Checkout
        uses: actions/checkout@v4
      
      # Create data directory FIRST
      - name: 📁 Initialize Data Directory
        run: |
          mkdir -p job_search_data
          echo "✅ Data directory created"
      
      # Method 1: Try cache first (fastest)
      - name: 💾 Restore from Cache
        id: cache
        uses: actions/cache/restore@v4
        with:
          path: job_search_data/
          key: ${{ env.CACHE_KEY_PREFIX }}${{ github.run_id }}
          restore-keys: |
            ${{ env.CACHE_KEY_PREFIX }}
        continue-on-error: true
      
      # Method 2: Fall back to artifact if cache miss
      - name: 📥 Restore from Artifact
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.STATE_ARTIFACT }}
          path: job_search_data/
        continue-on-error: true
      
      # Method 3: Initialize state if nothing was restored
      - name: 🔍 Verify and Initialize State
        id: verify
        run: |
          DATA_DIR="${DATA_DIR:-job_search_data}"
          
          echo "📂 Data directory: $DATA_DIR"
          
          # Ensure directory exists
          mkdir -p "$DATA_DIR"
          
          # Check for existing state
          if [ -f "$DATA_DIR/workflow_state.json" ]; then
            echo "✅ Previous state found"
            echo "📊 State file size: $(du -h "$DATA_DIR/workflow_state.json" | cut -f1)"
            
            # Show state summary
            if command -v jq &> /dev/null; then
              echo "📈 Current sprint: $(jq -r '.current_sprint // 0' "$DATA_DIR/workflow_state.json")"
              echo "📈 Current score: $(jq -r '.current_score // 0' "$DATA_DIR/workflow_state.json")%"
            fi
            
            echo "state_restored=true" >> $GITHUB_OUTPUT
          else
            echo "ℹ️  No previous state - initializing fresh state"
            
            # Create initial state file
            cat > "$DATA_DIR/workflow_state.json" << 'JSON'
          {
            "current_sprint": 0,
            "current_score": 0,
            "skills_mastered": [],
            "projects_completed": [],
            "quality_gates_passed": [],
            "application_ready": false,
            "initialized_at": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          }
          JSON
            
            echo "✅ Fresh state initialized"
            echo "state_restored=false" >> $GITHUB_OUTPUT
            echo "state_initialized=true" >> $GITHUB_OUTPUT
          fi
          
          # List contents
          if [ "$(ls -A "$DATA_DIR" 2>/dev/null)" ]; then
            echo ""
            echo "📁 Directory contents:"
            ls -lh "$DATA_DIR/" | head -10
          fi
          
      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: 📦 Install Dependencies
        run: |
          pip install -r requirements.txt
      
      # ========================================
      # EXECUTE REQUESTED ACTION
      # ========================================
      
      - name: 🎯 Execute Action
        run: |
          python << 'EOF'
          from src.python_advanced_job_engine import AdvancedJobEngine
          import os
          
          action = "${{ github.event.inputs.action }}" or "daily_report"
          engine = AdvancedJobEngine(data_dir="job_search_data")
          
          print(f"🎯 Executing action: {action}")
          print(f"📊 State restored: ${{ steps.verify.outputs.state_restored }}")
          
          try:
              if action == "full_analysis":
                  # Single job analysis
                  cv_file = "${{ github.event.inputs.cv_file }}"
                  job_file = "${{ github.event.inputs.job_file }}"
                  
                  if cv_file and job_file:
                      analysis = engine.analyze_from_files(
                          cv_file=cv_file,
                          job_file=job_file
                      )
                      print(f"✅ Analysis: {analysis['score']['total_score']}%")
                  else:
                      print("⚠️  Missing cv_file or job_file inputs")
              
              elif action == "batch_analysis":
                  # Multiple jobs
                  job_files_input = "${{ github.event.inputs.job_files }}"
                  cv_file = "${{ github.event.inputs.cv_file }}"
                  
                  if job_files_input and cv_file:
                      job_files = [f.strip() for f in job_files_input.split(',')]
                      for job_file in job_files:
                          analysis = engine.analyze_from_files(
                              cv_file=cv_file,
                              job_file=job_file
                          )
                          print(f"✅ {job_file}: {analysis['score']['total_score']}%")
                  else:
                      print("⚠️  Missing required inputs")
              
              elif action == "start_sprint":
                  skills_input = "${{ github.event.inputs.skills }}"
                  project_goal = "${{ github.event.inputs.project_goal }}"
                  
                  if skills_input:
                      skills = [s.strip() for s in skills_input.split(',')]
                      sprint = engine.start_sprint(
                          skills=skills,
                          project_goal=project_goal or "General skill development"
                      )
                      print(f"✅ Sprint {sprint['sprint_number']} started")
                  else:
                      print("⚠️  Missing skills input")
              
              elif action == "log_daily":
                  hours_input = "${{ github.event.inputs.hours }}"
                  concepts_input = "${{ github.event.inputs.concepts }}"
                  notes = "${{ github.event.inputs.notes }}"
                  
                  if hours_input and concepts_input:
                      concepts = [c.strip() for c in concepts_input.split(',')]
                      engine.log_daily(
                          hours=float(hours_input),
                          concepts=concepts,
                          notes=notes or "Daily progress"
                      )
                      print("✅ Daily progress logged")
                  else:
                      print("⚠️  Missing required inputs")
              
              elif action == "end_sprint":
                  project_url = "${{ github.event.inputs.project_url }}"
                  
                  result = engine.end_sprint(
                      project_url=project_url or "",
                      test_scores={}  # Parse from input if needed
                  )
                  print(f"✅ Sprint completed: {result.get('skills_gained', 0)} skills")
              
              elif action == "daily_report":
                  print("📊 Generating daily progress report...")
                  engine.display_progress_dashboard()
              
              elif action == "quality_check":
                  gates = engine.check_quality_gates()
                  passed = sum(gates.values())
                  total = len(gates)
                  print(f"✅ Quality Gates: {passed}/{total} passed")
                  for gate, status in gates.items():
                      print(f"  {'✅' if status else '❌'} {gate}")
              
              else:
                  print(f"❌ Unknown action: {action}")
          
          except Exception as e:
              print(f"❌ Error executing action: {e}")
              import traceback
              traceback.print_exc()
              raise
          
          EOF
      
      # ========================================
      # SAVE PERSISTENT STATE
      # ========================================
      
      - name: 💾 Save to Cache
        uses: actions/cache/save@v4
        if: always()
        with:
          path: job_search_data/
          key: ${{ env.CACHE_KEY_PREFIX }}${{ github.run_id }}
      
      - name: 💾 Save to Artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ env.STATE_ARTIFACT }}
          path: job_search_data/
          retention-days: 90
          overwrite: true
      
      # ========================================
      # OPTIONAL: COMMIT STATE
      # ========================================
      
      - name: 💾 Commit State (Optional)
        if: github.event.inputs.commit_state == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Only commit state files, not analysis results
          git add job_search_data/workflow_state.json 2>/dev/null || true
          git add job_search_data/sprint_history.json 2>/dev/null || true
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore: update job search state [skip ci]"
            git push
          fi
      
      # ========================================
      # GENERATE REPORTS
      # ========================================
      
      - name: 📊 Generate Report
        if: always()
        run: |
          python << 'EOF'
          from src.python_advanced_job_engine import AdvancedJobEngine
          from datetime import datetime
          import json
          from pathlib import Path
          
          try:
              engine = AdvancedJobEngine(data_dir="job_search_data")
              state = engine.state
              
              # Get state values with defaults
              current_score = state.get('current_score', 0)
              current_sprint = state.get('current_sprint', 0)
              skills_mastered = state.get('skills_mastered', [])
              projects = state.get('projects_completed', [])
              gates_passed = state.get('quality_gates_passed', [])
              app_ready = state.get('application_ready', False)
              
              report = f"""# Job Search Progress Report
          
          **Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}  
          **State Status:** {'Restored' if '${{ steps.verify.outputs.state_restored }}' == 'true' else 'Initialized'}  
          **Match Score:** {current_score}%  
          **Sprints Completed:** {current_sprint}  
          **Skills Mastered:** {len(skills_mastered)}  
          **Projects:** {len(projects)}
          
          ## Quality Gates
          - Foundation: {'✅' if 'foundation' in gates_passed else '⏳'}
          - Competency: {'✅' if 'competency' in gates_passed else '⏳'}
          - Mastery: {'✅' if 'mastery' in gates_passed else '⏳'}
          - Application Ready: {'✅' if app_ready else '⏳'}
          
          ## Next Steps
          {'✅ Ready to apply!' if app_ready else '⏳ Continue skill development'}
          """
              
              with open('PROGRESS_REPORT.md', 'w') as f:
                  f.write(report)
              
              print(report)
          
          except Exception as e:
              error_report = f"""# Job Search Progress Report
          
          **Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}  
          **Status:** ⚠️  Error generating report
          
          **Error:** {str(e)}
          
          This is likely a first run. The system will initialize on the next action.
          """
              
              with open('PROGRESS_REPORT.md', 'w') as f:
                  f.write(error_report)
              
              print(error_report)
          EOF
      
      - name: 📤 Upload Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: progress-report-${{ github.run_number }}
          path: PROGRESS_REPORT.md
          retention-days: 30
      
      # ========================================
      # STATUS SUMMARY
      # ========================================
      
      - name: 📋 Job Summary
        if: always()
        run: |
          cat PROGRESS_REPORT.md >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "**State Persistence:** Cache + Artifact" >> $GITHUB_STEP_SUMMARY
          echo "**State Restored:** ${{ steps.verify.outputs.state_restored }}" >> $GITHUB_STEP_SUMMARY
          echo "**Run Number:** ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
