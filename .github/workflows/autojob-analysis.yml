name: Auto Job Analysis

on:
  workflow_dispatch:
    inputs:
      cv_file:
        description: 'Path to CV file'
        required: false
        default: 'data/my_cv.txt'
      job_file:
        description: 'Path to job description file'
        required: false
        default: 'data/target_job.txt'
      job_title:
        description: 'Job title (optional)'
        required: false
        default: ''
      company_name:
        description: 'Company name (optional)'
        required: false
        default: ''
      generate_materials:
        description: 'Generate application materials?'
        required: false
        type: boolean
        default: true
      send_notification:
        description: 'Send email notification?'
        required: false
        type: boolean
        default: false

  push:
    paths:
      - 'data/**.pdf'
      - 'data/**.docx'
      - 'data/**.txt'

env:
  DEFAULT_CV: 'data/my_cv.txt'
  DEFAULT_JOB: 'data/target_job.txt'

jobs:
  analyze:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create output directories
      run: |
        mkdir -p job_search_data
        mkdir -p output

    # =====================================================
    # CRITICAL FIX: Set file paths with proper defaults
    # =====================================================
    - name: 🔧 Set file paths
      id: set_paths
      run: |
        # Get inputs (will be empty on push trigger)
        INPUT_CV="${{ github.event.inputs.cv_file }}"
        INPUT_JOB="${{ github.event.inputs.job_file }}"
        INPUT_TITLE="${{ github.event.inputs.job_title }}"
        INPUT_COMPANY="${{ github.event.inputs.company_name }}"
        INPUT_MATERIALS="${{ github.event.inputs.generate_materials }}"
        
        # Set defaults if empty
        CV_FILE="${INPUT_CV:-${{ env.DEFAULT_CV }}}"
        JOB_FILE="${INPUT_JOB:-${{ env.DEFAULT_JOB }}}"
        JOB_TITLE="${INPUT_TITLE:-Target Role}"
        COMPANY_NAME="${INPUT_COMPANY:-Target Company}"
        GENERATE_MATERIALS="${INPUT_MATERIALS:-true}"
        
        echo "📋 Configuration:"
        echo "   CV: $CV_FILE"
        echo "   Job: $JOB_FILE"
        echo "   Title: $JOB_TITLE"
        echo "   Company: $COMPANY_NAME"
        echo "   Generate Materials: $GENERATE_MATERIALS"
        
        # Export to environment
        echo "CV_FILE=$CV_FILE" >> $GITHUB_ENV
        echo "JOB_FILE=$JOB_FILE" >> $GITHUB_ENV
        echo "JOB_TITLE=$JOB_TITLE" >> $GITHUB_ENV
        echo "COMPANY_NAME=$COMPANY_NAME" >> $GITHUB_ENV
        echo "GENERATE_MATERIALS=$GENERATE_MATERIALS" >> $GITHUB_ENV

    - name: 🔍 Verify Input Files
      run: |
        echo "Checking data files..."
        echo ""
        echo "📂 Available files:"
        ls -lh data/
        echo ""
    
        # Check if CV exists and is not empty
        if [ ! -f "$CV_FILE" ]; then
            echo "❌ Error: CV file not found: $CV_FILE"
            exit 1
        fi
        
        if [ ! -s "$CV_FILE" ]; then
          echo "❌ Error: CV file is empty: $CV_FILE"
          exit 1
        fi
    
        # Check if job file exists and is not empty
        if [ ! -f "$JOB_FILE" ]; then
           echo "❌ Error: Job file not found: $JOB_FILE"
           exit 1
        fi
    
        if [ ! -s "$JOB_FILE" ]; then
           echo "❌ Error: Job file is empty: $JOB_FILE"
           exit 1
        fi
    
        echo "✅ Files verified:"
        echo "   CV:  $CV_FILE ($(stat -c%s "$CV_FILE" 2>/dev/null || stat -f%z "$CV_FILE") bytes)"
        echo "   Job: $JOB_FILE ($(stat -c%s "$JOB_FILE" 2>/dev/null || stat -f%z "$JOB_FILE") bytes)"

    - name: Run job analysis
      id: analysis
      run: |
        python << 'EOF'
        from src.python_advanced_job_engine import AdvancedJobEngine
        import json
        import os
        from datetime import datetime
        
        # Get values from environment (set in previous step)
        cv_file = os.environ.get('CV_FILE')
        job_file = os.environ.get('JOB_FILE')
        job_title = os.environ.get('JOB_TITLE')
        company = os.environ.get('COMPANY_NAME')
        generate_materials = os.environ.get('GENERATE_MATERIALS', 'true').lower() == 'true'
        
        print("="*70)
        print("🔍 JOB ANALYSIS ENGINE")
        print("="*70)
        
        # Initialize engine
        engine = AdvancedJobEngine()
        
        # Run analysis
        print(f"\n📄 CV: {cv_file}")
        print(f"📋 Job: {job_file}")
        print(f"🏢 Company: {company}")
        print(f"💼 Title: {job_title}")
        print(f"📅 Started: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print()
        
        try:
            analysis = engine.analyze_from_files(
                cv_file=cv_file,
                job_file=job_file,
                job_title=job_title if job_title != 'Target Role' else None,
                company=company if company != 'Target Company' else None
            )
            
            job_id = analysis['job_id']
            score = analysis['score']['total_score']
            
            print(f"✅ Analysis complete!")
            print(f"📊 Match Score: {score}%")
            print(f"🆔 Job ID: {job_id}")
            
        except Exception as e:
            print(f"❌ Analysis failed: {e}")
            import traceback
            traceback.print_exc()
            exit(1)
        
        # Generate learning plan
        print("\n📚 Creating learning plan...")
        try:
            learning_plan = engine.create_learning_plan(analysis, mode="standard")
            print("✅ Learning plan created")
        except Exception as e:
            print(f"⚠️  Learning plan error: {e}")
            learning_plan = {}
        
        # Generate improvement strategy
        print("\n🎯 Creating improvement strategy...")
        try:
            strategy = engine.create_improvement_strategy(analysis, learning_plan)
            print("✅ Strategy created")
        except Exception as e:
            print(f"⚠️  Strategy error: {e}")
            strategy = "Strategy generation failed"
        
        # Generate application materials (if requested)
        letters = {}
        if generate_materials:
            print("\n✉️  Generating application materials...")
            try:
                letters = engine.generate_recruiter_letter(analysis, learning_plan)
                print("✅ Application materials created")
            except Exception as e:
                print(f"⚠️  Letters error: {e}")
        
        # Generate skill tests
        print("\n🧪 Creating skill tests...")
        try:
            missing_skills = analysis['gaps']['missing_required_skills'][:10]
            tests = engine.generate_skill_tests(missing_skills)
            print(f"✅ Created tests for {len(missing_skills)} skills")
        except Exception as e:
            print(f"⚠️  Tests error: {e}")
            tests = {}
        
        # Save results
        print("\n💾 Saving outputs...")
        
        with open('output/match_score.json', 'w') as f:
            json.dump(analysis['score'], f, indent=2)
        print("  ✅ match_score.json")
        
        with open('output/gap_analysis.json', 'w') as f:
            json.dump(analysis['gaps'], f, indent=2)
        print("  ✅ gap_analysis.json")
        
        with open('output/full_analysis.json', 'w') as f:
            json.dump(analysis, f, indent=2)
        print("  ✅ full_analysis.json")
        
        with open('output/learning_plan.json', 'w') as f:
            json.dump(learning_plan, f, indent=2)
        print("  ✅ learning_plan.json")
        
        with open('output/improvement_strategy.md', 'w') as f:
            f.write(strategy)
        print("  ✅ improvement_strategy.md")
        
        # Save application materials
        if generate_materials and letters:
            for letter_type in ['cover_letter', 'linkedin_message', 'followup_email', 'networking_email']:
                content = letters.get(letter_type, f"# {letter_type}\n\nNot generated")
                with open(f'output/{letter_type}.txt', 'w') as f:
                    f.write(content)
                print(f"  ✅ {letter_type}.txt")
        
        # Save skill tests
        with open('output/skill_tests.json', 'w') as f:
            json.dump(tests, f, indent=2)
        print("  ✅ skill_tests.json")
        
        # Create complete report
        report = f"""# Job Match Analysis Report

**Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
**Job ID:** {job_id}

---

## Match Score: {score}%

### Score Breakdown
"""
        for category, cat_score in analysis['score']['breakdown'].items():
            report += f"- {category.replace('_', ' ').title()}: {cat_score}%\n"
        
        report += f"\n---\n\n## Gap Analysis\n\n"
        report += f"### Missing Required Skills ({len(analysis['gaps']['missing_required_skills'])})\n"
        for skill in analysis['gaps']['missing_required_skills'][:15]:
            report += f"- {skill}\n"
        if len(analysis['gaps']['missing_required_skills']) > 15:
            report += f"\n... and {len(analysis['gaps']['missing_required_skills']) - 15} more\n"
        
        report += f"\n### Missing Preferred Skills ({len(analysis['gaps']['missing_preferred_skills'])})\n"
        for skill in analysis['gaps']['missing_preferred_skills'][:10]:
            report += f"- {skill}\n"
        
        report += f"\n### Experience Gap: {analysis['gaps']['experience_gap']} years\n"
        report += f"### Education Gap: {analysis['gaps']['education_gap']}\n"
        
        report += f"\n---\n\n## Recommendation\n\n"
        if score >= 75:
            report += "✅ **STRONG CANDIDATE** - Apply now!\n"
        elif score >= 60:
            report += "⚠️  **NEEDS IMPROVEMENT** - Improve for 4-8 weeks\n"
        else:
            report += "❌ **MAJOR GAPS** - Focus on skill development for 12-24 weeks\n"
        
        with open('output/complete_report.md', 'w') as f:
            f.write(report)
        print("  ✅ complete_report.md")
        
        # Create summary
        status = '✅ STRONG CANDIDATE' if score >= 75 else '⚠️ NEEDS IMPROVEMENT'
        action = 'Apply now!' if score >= 75 else f"Improve for {12 if score < 60 else 4}-{24 if score < 60 else 8} weeks"
        
        summary = f"""ANALYSIS SUMMARY

Job ID: {job_id}
Match Score: {score}%
Status: {status}

Action: {action}

Files generated:
  - complete_report.md
  - match_score.json
  - gap_analysis.json
  - full_analysis.json
  - learning_plan.json
  - improvement_strategy.md
  - skill_tests.json"""

        if generate_materials:
            summary += """
  - cover_letter.txt
  - linkedin_message.txt
  - followup_email.txt
  - networking_email.txt"""
        
        with open('output/summary.txt', 'w') as f:
            f.write(summary)
        print("  ✅ summary.txt")
        
        print(f"\n{'='*70}")
        print(f"✅ ANALYSIS COMPLETE")
        print(f"{'='*70}")
        print(f"📊 Match Score: {score}%")
        print(f"🆔 Job ID: {job_id}")
        print(f"⏰ Completed: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"{'='*70}")
        
        # Set output for next steps
        with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            f.write(f"score={score}\n")
            f.write(f"job_id={job_id}\n")
            f.write(f"status={'success' if score >= 75 else 'needs_improvement'}\n")
        
        EOF

    - name: Upload results as artifact
      uses: actions/upload-artifact@v4
      with:
        name: job-analysis-results-${{ steps.analysis.outputs.job_id }}
        path: output/
        retention-days: 90

    - name: Create summary
      run: |
        echo "## 🎯 Job Analysis Complete!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Match Score:** ${{ steps.analysis.outputs.score }}%" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** ${{ steps.analysis.outputs.status }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📥 Download the 'job-analysis-results' artifact to view all reports" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f output/summary.txt ]; then
          cat output/summary.txt >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📂 Files Generated" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        ls -lh output/ >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

    - name: Send email notification
      if: ${{ github.event.inputs.send_notification == 'true' }}
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.SMTP_USERNAME }}
        password: ${{ secrets.SMTP_PASSWORD }}
        subject: "Job Analysis Complete - Score: ${{ steps.analysis.outputs.score }}%"
        to: ${{ secrets.NOTIFICATION_EMAIL }}
        from: Job Analysis Bot
        body: |
          Your job analysis has completed!
          
          Match Score: ${{ steps.analysis.outputs.score }}%
          Job ID: ${{ steps.analysis.outputs.job_id }}
          
          Download results: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
