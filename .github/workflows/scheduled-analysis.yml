name: Scheduled Job Re-Analysis

on:
  schedule:
    # Run on the 1st of every month at 9 AM UTC
    - cron: '0 9 1 * *'
  
  workflow_dispatch:
    inputs:
      cv_file:
        description: 'Path to CV file'
        required: false
        default: 'data/my_cv.pdf'

jobs:
  scheduled-reanalysis:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create directories
      run: |
        mkdir -p output
        mkdir -p progress_tracking

    - name: Find all job descriptions
      id: find_jobs
      run: |
        echo "Finding all job description files..."
        job_files=$(find data/ -type f \( -name "*job*.pdf" -o -name "*job*.docx" -o -name "*job*.txt" \) | tr '\n' ',')
        echo "job_files=$job_files" >> $GITHUB_OUTPUT
        echo "Found jobs: $job_files"

    - name: Run monthly re-analysis
      id: reanalysis
      run: |
        python << 'EOF'
        from src.python_advanced_job_engine import AdvancedJobEngine
        import json
        import os
        from datetime import datetime
        from pathlib import Path
        
        engine = AdvancedJobEngine()
        
        cv_file = "${{ github.event.inputs.cv_file }}" or "data/my_cv.pdf"
        job_files = "${{ steps.find_jobs.outputs.job_files }}".split(',')
        job_files = [f for f in job_files if f.strip()]
        
        print(f"📅 Monthly Re-Analysis: {datetime.now().strftime('%Y-%m-%d')}")
        print(f"📄 CV: {cv_file}")
        print(f"🎯 Jobs to analyze: {len(job_files)}")
        
        results = []
        
        for job_file in job_files:
            if not job_file.strip():
                continue
                
            print(f"\n🔍 Analyzing: {job_file}")
            
            try:
                analysis = engine.analyze_from_files(
                    cv_file=cv_file,
                    job_file=job_file.strip()
                )
                
                results.append({
                    'job_file': job_file.strip(),
                    'job_id': analysis['job_id'],
                    'score': analysis['score']['total_score'],
                    'status': 'success',
                    'date': datetime.now().isoformat()
                })
                
                print(f"✅ Score: {analysis['score']['total_score']}%")
                
            except Exception as e:
                print(f"❌ Error analyzing {job_file}: {str(e)}")
                results.append({
                    'job_file': job_file.strip(),
                    'score': 0,
                    'status': 'error',
                    'error': str(e),
                    'date': datetime.now().isoformat()
                })
        
        # Save monthly results
        month_year = datetime.now().strftime('%Y-%m')
        output_file = f"progress_tracking/results_{month_year}.json"
        
        with open(output_file, 'w') as f:
            json.dump(results, f, indent=2)
        
        # Load historical data
        history = []
        for hist_file in Path('progress_tracking').glob('results_*.json'):
            with open(hist_file) as f:
                history.extend(json.load(f))
        
        # Generate progress report
        report = f"""# Monthly Progress Report - {datetime.now().strftime('%B %Y')}

## Summary

Total Jobs Analyzed: {len(results)}
Average Score: {sum(r['score'] for r in results if r['status'] == 'success') / len([r for r in results if r['status'] == 'success']):.1f}%

## Job Scores

"""
        
        for result in sorted(results, key=lambda x: x['score'], reverse=True):
            status_emoji = "✅" if result['score'] >= 75 else "⚠️" if result['score'] >= 60 else "❌"
            report += f"{status_emoji} {result['job_file']}: **{result['score']}%**\n"
        
        report += "\n## Progress Tracking\n\n"
        
        # Group by job and show progress over time
        from collections import defaultdict
        job_progress = defaultdict(list)
        
        for entry in history:
            job_progress[entry['job_file']].append({
                'date': entry['date'],
                'score': entry['score']
            })
        
        for job_file, progress in job_progress.items():
            if len(progress) > 1:
                sorted_progress = sorted(progress, key=lambda x: x['date'])
                first_score = sorted_progress[0]['score']
                last_score = sorted_progress[-1]['score']
                change = last_score - first_score
                
                if change > 0:
                    report += f"📈 **{job_file}**: {first_score}% → {last_score}% (+{change}%)\n"
                elif change < 0:
                    report += f"📉 **{job_file}**: {first_score}% → {last_score}% ({change}%)\n"
                else:
                    report += f"➡️ **{job_file}**: {last_score}% (no change)\n"
        
        with open('output/monthly_report.md', 'w') as f:
            f.write(report)
        
        print("\n✅ Monthly re-analysis complete!")
        
        # Set outputs
        avg_score = sum(r['score'] for r in results if r['status'] == 'success') / len([r for r in results if r['status'] == 'success'])
        with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            f.write(f"average_score={avg_score:.1f}\n")
            f.write(f"total_jobs={len(results)}\n")
        
        EOF

    - name: Commit progress tracking
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add progress_tracking/
        git commit -m "📊 Monthly progress update - $(date +'%Y-%m')" || echo "No changes to commit"
        git push || echo "Nothing to push"

    - name: Upload monthly report
      uses: actions/upload-artifact@v4
      with:
        name: monthly-report-${{ github.run_id }}
        path: output/monthly_report.md
        retention-days: 365

    - name: Create summary
      run: |
        echo "## 📊 Monthly Re-Analysis Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Average Score:** ${{ steps.reanalysis.outputs.average_score }}%" >> $GITHUB_STEP_SUMMARY
        echo "**Jobs Analyzed:** ${{ steps.reanalysis.outputs.total_jobs }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        cat output/monthly_report.md >> $GITHUB_STEP_SUMMARY
