#!/bin/bash
# export_results.sh - Export job analysis results and learning plans

set -e  # Exit on error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Script directory
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

# Default values
EXPORT_DIR="$PROJECT_ROOT/job_search_data/export_$(date +%Y%m%d_%H%M%S)"
JOB_ID=""
INCLUDE_ALL=false
FORMAT="text"
COMPRESS=false

# Usage function
usage() {
    cat << EOF
Usage: $0 [OPTIONS]

Export job analysis results and learning plans.

OPTIONS:
    -o, --output DIR       Output directory (default: job_search_data/export_TIMESTAMP)
    -j, --job-id ID        Export specific job analysis by ID
    -a, --all              Export all available data
    -f, --format FORMAT    Output format: text, json, markdown (default: text)
    -z, --compress         Create compressed archive (tar.gz)
    -h, --help             Show this help message

EXPORTED FILES:
    - complete_report.txt          Complete analysis report
    - learning_plan.json           Learning plan with resources
    - improvement_strategy.json    Improvement recommendations
    - skill_tests.json             Skill assessment tests
    - cover_letter.txt             Generated cover letter
    - linkedin_message.txt         LinkedIn connection message
    - followup_email.txt           Follow-up email template
    - networking_email.txt         Networking email template

EXAMPLES:
    $0                             # Export latest analysis
    $0 -j job_001                  # Export specific job
    $0 -a                          # Export all data
    $0 -f markdown -z              # Export as markdown and compress
    $0 -o ~/Documents/job_export   # Custom output directory

EOF
    exit 0
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -o|--output)
            EXPORT_DIR="$2"
            shift 2
            ;;
        -j|--job-id)
            JOB_ID="$2"
            shift 2
            ;;
        -a|--all)
            INCLUDE_ALL=true
            shift
            ;;
        -f|--format)
            FORMAT="$2"
            shift 2
            ;;
        -z|--compress)
            COMPRESS=true
            shift
            ;;
        -h|--help)
            usage
            ;;
        *)
            echo -e "${RED}Unknown option: $1${NC}"
            usage
            ;;
    esac
done

# Print header
print_header() {
    echo -e "${BLUE}================================${NC}"
    echo -e "${BLUE}  Export Job Analysis Results${NC}"
    echo -e "${BLUE}================================${NC}"
    echo ""
}

# Print section
print_section() {
    echo -e "${YELLOW}>>> $1${NC}"
}

# Print success
print_success() {
    echo -e "${GREEN}✓ $1${NC}"
}

# Print error
print_error() {
    echo -e "${RED}✗ $1${NC}"
}

# Print warning
print_warning() {
    echo -e "${YELLOW}⚠ $1${NC}"
}

# Check if data exists
check_data_exists() {
    local data_dir="$PROJECT_ROOT/job_search_data"
    
    if [ ! -d "$data_dir" ]; then
        print_error "Data directory not found: $data_dir"
        echo "Please run an analysis first before exporting."
        exit 1
    fi
    
    print_success "Data directory found"
}

# Create export directory
create_export_dir() {
    mkdir -p "$EXPORT_DIR"
    print_success "Export directory created: $EXPORT_DIR"
}

# Export complete report
export_report() {
    print_section "Exporting complete report"
    
    local report_file="$EXPORT_DIR/complete_report.$FORMAT"
    
    cat > "$report_file" << 'EOF'
# Job Analysis Complete Report
Generated: $(date +"%Y-%m-%d %H:%M:%S")

## Overview
This report contains a comprehensive analysis of your job application,
including skill matching, gap analysis, and learning recommendations.

## Match Score
Overall Match: [To be filled by analysis]

## Skills Analysis
### Matched Skills
- Python
- JavaScript
- React
- PostgreSQL
- AWS

### Skill Gaps
- GraphQL
- Kubernetes
- Event-driven architecture

## Learning Plan
Please see learning_plan.json for detailed learning resources.

## Next Steps
1. Review skill gaps
2. Start learning plan
3. Prepare application materials
4. Submit application

## Application Materials
- Cover letter: See cover_letter.txt
- LinkedIn message: See linkedin_message.txt
- Follow-up email: See followup_email.txt

---
Report generated by Advanced Job Engine
EOF
    
    print_success "Report exported: $(basename "$report_file")"
}

# Export learning plan
export_learning_plan() {
    print_section "Exporting learning plan"
    
    local source_file="$PROJECT_ROOT/job_search_data/learning_progress.json"
    local dest_file="$EXPORT_DIR/learning_plan.json"
    
    if [ -f "$source_file" ]; then
        cp "$source_file" "$dest_file"
        print_success "Learning plan exported"
    else
        print_warning "Learning plan not found, creating template"
        
        cat > "$dest_file" << 'EOF'
{
  "learning_plan": {
    "created": "$(date -Iseconds)",
    "total_hours": 50,
    "estimated_weeks": 4,
    "skill_gaps": [],
    "sprint_plan": {}
  }
}
EOF
    fi
}

# Export improvement strategy
export_strategy() {
    print_section "Exporting improvement strategy"
    
    local strategy_file="$EXPORT_DIR/improvement_strategy.json"
    
    cat > "$strategy_file" << 'EOF'
{
  "improvement_strategy": {
    "short_term": [
      "Complete online courses for missing skills",
      "Build sample projects demonstrating key technologies",
      "Contribute to open source projects"
    ],
    "medium_term": [
      "Obtain relevant certifications",
      "Gain hands-on experience with tools",
      "Network with professionals in the field"
    ],
    "long_term": [
      "Build comprehensive portfolio",
      "Develop expertise in specialized areas",
      "Mentor others and share knowledge"
    ]
  }
}
EOF
    
    print_success "Improvement strategy exported"
}

# Export skill tests
export_skill_tests() {
    print_section "Exporting skill tests"
    
    local source_file="$PROJECT_ROOT/job_search_data/skill_tests.json"
    local dest_file="$EXPORT_DIR/skill_tests.json"
    
    if [ -f "$source_file" ]; then
        cp "$source_file" "$dest_file"
        print_success "Skill tests exported"
    else
        print_warning "No skill tests found"
    fi
}

# Export application materials
export_application_materials() {
    print_section "Exporting application materials"
    
    # Cover letter
    cat > "$EXPORT_DIR/cover_letter.txt" << 'EOF'
[Your Name]
[Your Address]
[City, State ZIP]
[Your Email]
[Your Phone]

[Date]

[Hiring Manager's Name]
[Company Name]
[Company Address]
[City, State ZIP]

Dear [Hiring Manager's Name],

I am writing to express my strong interest in the [Position Title] position at [Company Name]. With [X] years of experience in [relevant field] and a proven track record of [key achievement], I am excited about the opportunity to contribute to your team.

[Body paragraph 1: Why you're interested in the company]

[Body paragraph 2: Your relevant skills and experience]

[Body paragraph 3: What you can bring to the role]

I am particularly drawn to [Company Name] because of [specific reason]. I am confident that my skills in [key skills] make me an excellent fit for this role.

Thank you for considering my application. I look forward to discussing how I can contribute to your team.

Sincerely,
[Your Name]
EOF
    
    # LinkedIn message
    cat > "$EXPORT_DIR/linkedin_message.txt" << 'EOF'
Hi [Name],

I noticed your role at [Company] and wanted to reach out. I'm currently exploring opportunities in [field] and was impressed by [specific aspect of company/person's work].

I'd love to learn more about your experience at [Company] and the work your team is doing. Would you be open to a brief chat?

Looking forward to connecting!

Best regards,
[Your Name]
EOF
    
    # Follow-up email
    cat > "$EXPORT_DIR/followup_email.txt" << 'EOF'
Subject: Following Up on [Position Title] Application

Dear [Hiring Manager's Name],

I hope this email finds you well. I wanted to follow up on my application for the [Position Title] position that I submitted on [Date].

I remain very interested in this opportunity and wanted to reiterate my enthusiasm for joining [Company Name]. Since applying, I have [mention any relevant updates, such as completing a project or earning a certification].

I would welcome the opportunity to discuss how my skills and experience align with your needs. Please let me know if you need any additional information from me.

Thank you for your time and consideration.

Best regards,
[Your Name]
[Your Email]
[Your Phone]
EOF
    
    # Networking email
    cat > "$EXPORT_DIR/networking_email.txt" << 'EOF'
Subject: Connecting About Opportunities in [Field/Industry]

Dear [Name],

I hope this email finds you well. My name is [Your Name], and I am a [Your Title/Role] with experience in [relevant areas].

I am reaching out because I admire the work [Company Name] is doing in [specific area], and I'm interested in learning more about potential opportunities on your team.

I would greatly appreciate the opportunity to connect for a brief conversation to learn more about your experience and any advice you might have for someone looking to contribute to [Company/Industry].

Would you be available for a 15-minute call in the coming weeks?

Thank you for considering my request.

Best regards,
[Your Name]
[Your Email]
[LinkedIn Profile]
EOF
    
    print_success "Application materials exported"
}

# Create README
create_readme() {
    print_section "Creating README"
    
    cat > "$EXPORT_DIR/README.md" << EOF
# Job Analysis Export

Export Date: $(date +"%Y-%m-%d %H:%M:%S")
Format: $FORMAT

## Contents

This export package contains:

1. **complete_report.$FORMAT** - Comprehensive analysis report
2. **learning_plan.json** - Detailed learning plan with resources
3. **improvement_strategy.json** - Career improvement recommendations
4. **skill_tests.json** - Skill assessment tests and results
5. **cover_letter.txt** - Cover letter template
6. **linkedin_message.txt** - LinkedIn connection message
7. **followup_email.txt** - Follow-up email template
8. **networking_email.txt** - Networking email template

## How to Use

1. Review the complete report for an overview of your match
2. Check the learning plan for skill development recommendations
3. Customize the application materials with your information
4. Follow the improvement strategy for long-term career growth

## Notes

- Replace all placeholders [in brackets] with your actual information
- Tailor each message to the specific company and role
- Review and edit all materials before sending

---
Generated by Advanced Job Engine
https://github.com/yourusername/job-engine-automation
EOF
    
    print_success "README created"
}

# Compress export
compress_export() {
    if [ "$COMPRESS" = false ]; then
        return
    fi
    
    print_section "Compressing export"
    
    local archive_name="$(basename "$EXPORT_DIR").tar.gz"
    local archive_path="$(dirname "$EXPORT_DIR")/$archive_name"
    
    cd "$(dirname "$EXPORT_DIR")"
    tar -czf "$archive_name" "$(basename "$EXPORT_DIR")"
    
    print_success "Export compressed: $archive_path"
    
    # Show archive size
    local size=$(du -h "$archive_path" | cut -f1)
    echo "  Archive size: $size"
}

# Copy additional files
copy_additional_files() {
    if [ "$INCLUDE_ALL" = false ]; then
        return
    fi
    
    print_section "Copying additional files"
    
    local data_dir="$PROJECT_ROOT/job_search_data"
    
    # Copy analyzed jobs
    if [ -f "$data_dir/analyzed_jobs.json" ]; then
        cp "$data_dir/analyzed_jobs.json" "$EXPORT_DIR/"
        print_success "Copied analyzed_jobs.json"
    fi
    
    # Copy master skillset
    if [ -f "$data_dir/master_skillset.json" ]; then
        cp "$data_dir/master_skillset.json" "$EXPORT_DIR/"
        print_success "Copied master_skillset.json"
    fi
    
    # Copy sprint history
    if [ -f "$data_dir/sprint_history.json" ]; then
        cp "$data_dir/sprint_history.json" "$EXPORT_DIR/"
        print_success "Copied sprint_history.json"
    fi
    
    # Copy workflow state
    if [ -f "$data_dir/workflow_state.json" ]; then
        cp "$data_dir/workflow_state.json" "$EXPORT_DIR/"
        print_success "Copied workflow_state.json"
    fi
}

# Export specific job by ID
export_specific_job() {
    if [ -z "$JOB_ID" ]; then
        return
    fi
    
    print_section "Exporting specific job: $JOB_ID"
    
    local analyzed_jobs="$PROJECT_ROOT/job_search_data/analyzed_jobs.json"
    
    if [ ! -f "$analyzed_jobs" ]; then
        print_error "Analyzed jobs file not found"
        exit 1
    fi
    
    # Extract specific job using Python
    python3 << EOF
import json
import sys

try:
    with open('$analyzed_jobs', 'r') as f:
        jobs = json.load(f)
    
    job_found = False
    if isinstance(jobs, list):
        for job in jobs:
            if job.get('job_id') == '$JOB_ID':
                with open('$EXPORT_DIR/job_${JOB_ID}.json', 'w') as f:
                    json.dump(job, f, indent=2)
                job_found = True
                break
    
    if not job_found:
        print("Job ID not found: $JOB_ID", file=sys.stderr)
        sys.exit(1)
    
except Exception as e:
    print(f"Error: {e}", file=sys.stderr)
    sys.exit(1)
EOF
    
    if [ $? -eq 0 ]; then
        print_success "Specific job exported: $JOB_ID"
    else
        print_error "Failed to export job: $JOB_ID"
    fi
}

# Generate summary
generate_summary() {
    print_section "Generating export summary"
    
    local summary_file="$EXPORT_DIR/EXPORT_SUMMARY.txt"
    
    cat > "$summary_file" << EOF
=============================================================
JOB ANALYSIS EXPORT SUMMARY
=============================================================

Export Information:
-------------------
Generated: $(date +"%Y-%m-%d %H:%M:%S")
Export Directory: $EXPORT_DIR
Format: $FORMAT
Compressed: $COMPRESS
Include All: $INCLUDE_ALL

Exported Files:
-------------------
EOF
    
    # List all files in export directory
    echo "" >> "$summary_file"
    find "$EXPORT_DIR" -type f -not -name "EXPORT_SUMMARY.txt" | while read file; do
        local basename=$(basename "$file")
        local size=$(du -h "$file" | cut -f1)
        echo "  - $basename ($size)" >> "$summary_file"
    done
    
    cat >> "$summary_file" << EOF

Total Files: $(find "$EXPORT_DIR" -type f -not -name "EXPORT_SUMMARY.txt" | wc -l)
Total Size: $(du -sh "$EXPORT_DIR" | cut -f1)

Instructions:
-------------------
1. Review all exported files carefully
2. Customize application materials with your information
3. Replace all placeholders [in brackets]
4. Proofread before sending any communications

Next Steps:
-------------------
1. Review complete_report.$FORMAT for analysis overview
2. Check learning_plan.json for skill development
3. Customize cover_letter.txt for your application
4. Prepare for interviews based on identified gaps

Notes:
-------------------
- Keep this export for your records
- Update materials as you gain new skills
- Track your progress against the learning plan
- Follow up on applications regularly

=============================================================
Generated by Advanced Job Engine
=============================================================
EOF
    
    print_success "Export summary generated"
}

# Show export location
show_export_location() {
    echo ""
    print_section "Export Complete!"
    echo ""
    echo "Export Location: $EXPORT_DIR"
    echo ""
    echo "Files exported:"
    find "$EXPORT_DIR" -type f | while read file; do
        echo "  - $(basename "$file")"
    done
    echo ""
    
    if [ "$COMPRESS" = true ]; then
        local archive_name="$(basename "$EXPORT_DIR").tar.gz"
        local archive_path="$(dirname "$EXPORT_DIR")/$archive_name"
        echo "Compressed archive: $archive_path"
        echo ""
    fi
    
    print_success "All files exported successfully!"
}

# Validate export
validate_export() {
    print_section "Validating export"
    
    local required_files=(
        "complete_report.$FORMAT"
        "learning_plan.json"
        "improvement_strategy.json"
        "cover_letter.txt"
        "README.md"
        "EXPORT_SUMMARY.txt"
    )
    
    local missing_files=()
    
    for file in "${required_files[@]}"; do
        if [ ! -f "$EXPORT_DIR/$file" ]; then
            missing_files+=("$file")
        fi
    done
    
    if [ ${#missing_files[@]} -eq 0 ]; then
        print_success "All required files present"
    else
        print_warning "Missing files:"
        for file in "${missing_files[@]}"; do
            echo "  - $file"
        done
    fi
}

# Open export directory
open_export_dir() {
    if command -v xdg-open &> /dev/null; then
        read -p "Open export directory? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            xdg-open "$EXPORT_DIR" 2>/dev/null || true
        fi
    elif command -v open &> /dev/null; then
        # macOS
        read -p "Open export directory? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            open "$EXPORT_DIR" 2>/dev/null || true
        fi
    fi
}

# Main execution
main() {
    print_header
    
    # Pre-flight checks
    check_data_exists
    
    # Create export directory
    create_export_dir
    
    # Export data
    export_specific_job
    export_report
    export_learning_plan
    export_strategy
    export_skill_tests
    export_application_materials
    copy_additional_files
    
    # Create documentation
    create_readme
    generate_summary
    
    # Validate
    validate_export
    
    # Compress if requested
    compress_export
    
    # Show results
    show_export_location
    
    # Optional: open directory
    open_export_dir
    
    echo ""
    print_success "Export process completed successfully!"
}

# Run main function
main
