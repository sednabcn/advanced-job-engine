[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "advanced-job-engine"
version = "1.0.0"
description = "Advanced Job Engine for CV analysis, skill gap identification, and career development planning"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
maintainers = [
    {name = "Your Name", email = "your.email@example.com"}
]
keywords = [
    "job-search",
    "cv-analysis",
    "skill-matching",
    "career-development",
    "learning-plan",
    "automation",
    "job-application"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "Intended Audience :: Developers",
    "Topic :: Office/Business",
    "Topic :: Education",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
]

dependencies = [
    "PyPDF2>=3.0.0",
    "python-docx>=0.8.11",
    "requests>=2.31.0",
    "beautifulsoup4>=4.12.0",
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0",
    "jinja2>=3.1.0",
    "click>=8.1.0",
    "rich>=13.0.0",
    "tabulate>=0.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
    "pytest-mock>=3.11.0",
    "black>=23.7.0",
    "flake8>=6.1.0",
    "pylint>=2.17.0",
    "mypy>=1.5.0",
    "isort>=5.12.0",
    "pre-commit>=3.3.0",
]

docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autodoc-typehints>=1.24.0",
    "myst-parser>=2.0.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
    "pytest-mock>=3.11.0",
    "coverage>=7.3.0",
]

all = [
    "advanced-job-engine[dev,docs,test]",
]

[project.urls]
Homepage = "https://github.com/yourusername/advanced-job-engine"
Documentation = "https://advanced-job-engine.readthedocs.io"
Repository = "https://github.com/yourusername/advanced-job-engine"
"Bug Tracker" = "https://github.com/yourusername/advanced-job-engine/issues"
Changelog = "https://github.com/yourusername/advanced-job-engine/blob/main/CHANGELOG.md"

[project.scripts]
job-engine = "src.python_advanced_job_engine:main"
job-analyze = "src.python_advanced_job_engine:analyze_job"
job-export = "src.python_advanced_job_engine:export_results"

[tool.setuptools]
package-dir = {"" = "."}
packages = ["src", "src.analyzers", "src.learning", "src.tracking", "src.generators", "src.utils"]

[tool.setuptools.package-data]
"*" = ["*.txt", "*.md", "*.json", "*.yaml", "*.yml"]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | __pycache__
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_gitignore = true
skip_glob = ["*/migrations/*", "*/static/*"]

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--showlocals",
    "--tb=short",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow running tests",
    "requires_files: Tests that require external files",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/site-packages/*",
]
branch = true

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true

[[tool.mypy.overrides]]
module = [
    "PyPDF2.*",
    "docx.*",
    "bs4.*",
]
ignore_missing_imports = true

# Pylint configuration
[tool.pylint.main]
py-version = "3.8"
jobs = 0
limit-inference-results = 100
persistent = true
suggestion-mode = true
unsafe-load-any-extension = false

[tool.pylint.messages_control]
disable = [
    "C0103",  # Invalid name
    "C0114",  # Missing module docstring
    "C0115",  # Missing class docstring
    "C0116",  # Missing function docstring
    "R0903",  # Too few public methods
    "R0913",  # Too many arguments
]

[tool.pylint.format]
max-line-length = 100
indent-string = "    "

[tool.pylint.basic]
good-names = ["i", "j", "k", "ex", "Run", "_", "id", "cv"]

[tool.pylint.design]
max-args = 10
max-attributes = 15
max-bool-expr = 5
max-branches = 15
max-locals = 20
max-parents = 7
max-public-methods = 25
max-returns = 6
max-statements = 60
min-public-methods = 1

# Flake8 configuration (in setup.cfg or .flake8)
# Note: flake8 doesn't support pyproject.toml yet, but including here for reference
# Create a separate .flake8 file with this content:
# [flake8]
# max-line-length = 100
# extend-ignore = E203, E266, E501, W503
# exclude = .git,__pycache__,docs,build,dist,.eggs,*.egg
# max-complexity = 10

[tool.bandit]
exclude_dirs = ["tests", "test_*.py"]
skips = ["B101", "B601"]

[tool.bandit.assert_used]
skips = ["*/test_*.py", "*/tests/*"]